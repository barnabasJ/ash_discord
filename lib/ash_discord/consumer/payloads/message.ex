defmodule AshDiscord.Consumer.Payloads.Message do
  @moduledoc """
  TypedStruct wrapper for Discord Message data.

  Provides a unified AshDiscord type with all fields from `Nostrum.Struct.Message.t()`.
  """

  use Ash.TypedStruct

  typed_struct do
    field :id, :integer, allow_nil?: false, description: "The id of the message"
    field :channel_id, :integer, allow_nil?: false, description: "The id of the channel"
    field :guild_id, :integer, description: "The id of the guild"
    field :author, :map, description: "The user struct of the author"
    field :member, :map, description: "Member properties for this message's author"
    field :content, :string, description: "The content of the message"
    field :timestamp, :utc_datetime, description: "When the message was sent"
    field :edited_timestamp, :utc_datetime, description: "When the message was edited"
    field :tts, :boolean, description: "Whether this was a TTS message"
    field :mention_everyone, :boolean, description: "Whether this message mentions everyone"
    field :mentions, {:array, :map}, description: "List of users mentioned in the message"

    field :mention_roles, {:array, :integer},
      description: "List of role ids mentioned in the message"

    field :mention_channels, {:array, :map}, description: "Channels mentioned in the message"
    field :attachments, {:array, :map}, description: "List of attached files in the message"
    field :embeds, {:array, :map}, description: "List of embedded content in the message"
    field :reactions, {:array, :map}, description: "Reactions to the message"
    field :nonce, :string, description: "Validates if a message was sent"
    field :pinned, :boolean, description: "Whether this message is pinned"

    field :webhook_id, :integer,
      description: "If the message is generated by a webhook, this is the webhook's id"

    field :type, :integer, description: "Type of message"
    field :activity, :map, description: "Sent with Rich Presence-related chat embeds"
    field :application, :map, description: "Sent with Rich Presence-related chat embeds"

    field :application_id, :integer,
      description:
        "If the message is a response to an Interaction, this is the id of the application"

    field :message_reference, :map,
      description: "Reference data sent with crossposted messages and replies"

    field :referenced_message, :map,
      description: "The message that was replied to (if this is a reply)"

    field :interaction, :map, description: "Sent if the message is a response to an Interaction"
    field :thread, :map, description: "The thread that was started from this message"

    field :components, {:array, :map},
      description: "Message components (buttons, select menus, etc)"

    field :sticker_items, {:array, :map}, description: "Stickers sent with the message"
    field :poll, :map, description: "The poll object attached to the message"
  end

  @doc """
  Create a Message TypedStruct from a Nostrum Message struct.

  Accepts a `Nostrum.Struct.Message.t()` and creates an AshDiscord Message TypedStruct.
  """
  def new(%Nostrum.Struct.Message{} = nostrum_message) do
    super(Map.from_struct(nostrum_message))
  end
end
